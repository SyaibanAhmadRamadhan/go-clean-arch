// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/SyaibanAhmadRamadhan/go-clean-arch/domain/dto"
	"github.com/SyaibanAhmadRamadhan/go-clean-arch/domain/usecase"
)

type FakeAccountUsecase struct {
	UpdateAccountStub        func(context.Context, *dto.UpdateAccountReq) (*dto.UserResp, *dto.ProfileResp, error)
	updateAccountMutex       sync.RWMutex
	updateAccountArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.UpdateAccountReq
	}
	updateAccountReturns struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}
	updateAccountReturnsOnCall map[int]struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountUsecase) UpdateAccount(arg1 context.Context, arg2 *dto.UpdateAccountReq) (*dto.UserResp, *dto.ProfileResp, error) {
	fake.updateAccountMutex.Lock()
	ret, specificReturn := fake.updateAccountReturnsOnCall[len(fake.updateAccountArgsForCall)]
	fake.updateAccountArgsForCall = append(fake.updateAccountArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.UpdateAccountReq
	}{arg1, arg2})
	stub := fake.UpdateAccountStub
	fakeReturns := fake.updateAccountReturns
	fake.recordInvocation("UpdateAccount", []interface{}{arg1, arg2})
	fake.updateAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountUsecase) UpdateAccountCallCount() int {
	fake.updateAccountMutex.RLock()
	defer fake.updateAccountMutex.RUnlock()
	return len(fake.updateAccountArgsForCall)
}

func (fake *FakeAccountUsecase) UpdateAccountCalls(stub func(context.Context, *dto.UpdateAccountReq) (*dto.UserResp, *dto.ProfileResp, error)) {
	fake.updateAccountMutex.Lock()
	defer fake.updateAccountMutex.Unlock()
	fake.UpdateAccountStub = stub
}

func (fake *FakeAccountUsecase) UpdateAccountArgsForCall(i int) (context.Context, *dto.UpdateAccountReq) {
	fake.updateAccountMutex.RLock()
	defer fake.updateAccountMutex.RUnlock()
	argsForCall := fake.updateAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountUsecase) UpdateAccountReturns(result1 *dto.UserResp, result2 *dto.ProfileResp, result3 error) {
	fake.updateAccountMutex.Lock()
	defer fake.updateAccountMutex.Unlock()
	fake.UpdateAccountStub = nil
	fake.updateAccountReturns = struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountUsecase) UpdateAccountReturnsOnCall(i int, result1 *dto.UserResp, result2 *dto.ProfileResp, result3 error) {
	fake.updateAccountMutex.Lock()
	defer fake.updateAccountMutex.Unlock()
	fake.UpdateAccountStub = nil
	if fake.updateAccountReturnsOnCall == nil {
		fake.updateAccountReturnsOnCall = make(map[int]struct {
			result1 *dto.UserResp
			result2 *dto.ProfileResp
			result3 error
		})
	}
	fake.updateAccountReturnsOnCall[i] = struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateAccountMutex.RLock()
	defer fake.updateAccountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.AccountUsecase = new(FakeAccountUsecase)
